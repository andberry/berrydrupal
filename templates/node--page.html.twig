{#
/**
 * @file
 * Theme override to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: (optional) The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: (optional) Themed creation date field.
 * - author_name: (optional) Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 */
#}
{%
  set classes = [
    'node',
    'node--type-' ~ node.bundle|clean_class,
    not node.isPublished() ? 'node--unpublished',
  ]
%}

{{ attach_library('classy/node') }}

<article{{ attributes.addClass(classes) }}>

  <h1 class="node__title">{{ label }}</h1>

  <div{{ content_attributes.addClass('node__content') }}>

    {# Print a simple text field (plain or long/html) #}
    <div class="field__content">
        {{ content.field_content }}
    </div>

    {# Print a c-gallery component with single fields on node #}
    <div class="field__gallery">
        {% set cdata = [] %}
        {% for item in node.field_gallery %}
            {% set cdata = cdata|merge([
                {
                    'image_src': item|file_uri|image_style('crop_gallery'),
                    'image_alt': item.alt,
                    'link': item|file_uri|image_style('wide')
                }
            ]) %}
        {% endfor %}

        {% include '@berry/components/c-gallery.html.twig' with {
            'title': content.field_title,
            'items': cdata
        }%}
    </div>

    {# Print c-gallery component using paragraph #}
    <div class="field__paragraph-gallery">
        {{ content.field_paragraph_gallery }}
    </div>

    {# Print c-textimage component using fields on node #}
    <div class="field__text-image">
        {% include '@berry/components/c-textimage.html.twig' with {
            'title_tag': 'h5',
            'title': content.field_text_image_title,
            'text': content.field_text_image_content,
            'image': content.field_text_image_image.0
        }%}
    </div>

    {#
        Print Link field with custom markup (use "Link" as field formatter and NOT "separate link and text")
    #}
    <h2>Simple link</h2>
    <div class="field__link">
        <a href="{{ content.field_link.0['#url'] }}" class="c-button">{{ content.field_link.0['#title'] }}</a>
    </div>



    {#
        Using link field multiple
    #}
    <h2>Multiple links</h2>
    <div class="field__links">
        {% for i in 0 .. node.field_links|length - 1 %}
            {% set item = content.field_links[i] %}
            <div class="field-links__item">
                <a class="c-button" href="{{ item['#url'] }}">{{ item['#title'] }}</a>
            </div>
        {% endfor %}
    </div>



    {# Print File field with custom markup (handle with and without description) #}
    <div class="field__file">
        {% set file_url = file_url(node.field_file.0.entity.uri.value) %}
        {% set file_desc = (node.field_file.0.description) ? node.field_file.0.description : node.field_file.0.entity.filename.value %}
        <a href="{{ file_url }}" class="c-button--light">{{ file_desc }}</a>
    </div>

    {# Carousel using paragraph #}
    <div class="field__carousel">
        {{ content.field_paragraph_carousel }}
    </div>



    {# UIkit components testing #}
    <h2>UIkit components testing</h2>
    <h3>Accordion</h3>
    <ul uk-accordion="multiple: true">
    <li class="uk-open">
        <a class="uk-accordion-title" href="#">Item 1</a>
        <div class="uk-accordion-content">
            <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod tempor incididunt ut labore et dolore magna aliqua.</p>
        </div>
    </li>
    <li>
        <a class="uk-accordion-title" href="#">Item 2</a>
        <div class="uk-accordion-content">
            <p>Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute irure dolor reprehenderit.</p>
        </div>
    </li>
    <li>
        <a class="uk-accordion-title" href="#">Item 3</a>
        <div class="uk-accordion-content">
            <p>Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat proident.</p>
        </div>
    </li>
</ul>

  </div>

</article>
